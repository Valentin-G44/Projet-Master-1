TOP Outils Nmap et Hyda fonctionnel,
TOP Fichier .sh pour les isntallers Fonctionnel,
TOP Code pour utiliser les outils à partir d'un interface de choix Fonctionnel
####################
#########Pensé à changer dans le code les enregistrement des fichiers!!!!!!!!!!!!! (pour le moment une saisie est demander)
####################
----Nmap--- chercher servuce actif
Commande à tester
[Nmap] service actif ou existant
ceux en cours d'exécution
nmap -sV <adresse_IP_cible>
service existant
nmap -sV --version-all <adresse_IP_cible>


-----NMAP------à partir des port ouvert + d'infomration
Commande à tester
Les vulnérabilité sur un port = nmap --script vulners -p <port> <adresse_IP_cible>

---Nmap---- à partir des service existant ou ouvert + d'infomration de faill
nmap --script vulners -sV -oX ResultatServiceActifetExistant.xml <adresse_IP_cible>

----------Metasploit--------------
VM pleine de vulnérabilité : https://github.com/rapid7/metasploitable3 

A FAIRE !!!!!Ajouters d'autre outils !!!!!!
A FAIRE Ajouter + d'options (commande)
A FAIRE Dossier d'enregistrement des résultats
A FAIRE Interface graphique

Prochaine étape : 

Re définition du plan globale :
1 - Choix des outils (vérifier qu'il soit disponible sur GitHub + autorisation de les utilisers)
2 - Elaboration du Script qui vas télécharger et exécuter les outils de git hub
"3 - API GitHub en cas de référentiel privés"
4 - Gestion de dépendances (Prérequi pour fonctionner, bibliothèque)(modification du script)
4.1 - Gestion d'autorisation (execution en root)

Autre point à classer :
-Gestion des paramètres (voir les spécificités pour chaque outils)
-Gestion des erreurs/sécurités (ex : aucun saisie) (sécurité lors du téléchargement des outils)
-Mise en place d'une documentation : pour le fonctionnemnt, l'élaboration

Finir de lister les outils à utiliser
Voir pour les implémenter à du code 
Re installer DVWA sur docker en conteneur
Configurer DVWA pour pouvoir l'utiliser comme domain de test

Test du 26/03/24


Test des commandes à la mains : 
nmap -p <plage_de_ports> <adresse_IP_cible>
hydra -l <nom_utilisateur> -P <chemin_vers_liste_de_mots_de_passe> <adresse_IP_cible> <service>

Ajout du fichier de liste de mots de passe






2 VM

Kali = val mdp =TXXXert
DVWA = DVWA mdp = admin
  root > dvwa


Idée de fonctionnalité
/*
Scanne de vulnérabilité (Port ouvert)
Référentiel des vulnérabilités (liste des CVE )
Surveillance du trafic (Wiershark)
Application web
Envoi de phishing (SET)
test d'authentification (Force brute, Medusa, Hydra)
*/

Etape
Recherche sur les fonctionnalités pour la tool box (nmap, brut force...)
Choix des fonctionalité de la tool box (menu ect...)
Choix de 3 à 6 fonctionnalité pour la tool box
Recherche approfondie sur ces technologies (Comment les implémenter dans du code, module/fonction existante)
Codé sur Python
  -Coder l'inferface de notre prgm
  -Implémenter les fonctionnalités (nmap, brut force..)
      -Récupérer les données acquises avec nos tests
      -Créer des rapprots qui contiennent nos données

Pouvoir appeler notre prgm à partir d'un terminal
Pouvoir appeler notre prgm à partir d'un terminal linux




------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------

La toolbox automatisée pour les tests d'intrusion développée dans ce projet 
offrira plusieurs fonctions principales pour permettre une réalisation complète 
et efficace des tests d'intrusion.
1. Découverte de ports et de services : La toolbox explorera le système
cible pour identifier les ports et les services en cours d'exécution. Cela 
permettra à l'utilisateur de connaître l'architecture du système cible et 
les services disponibles.
2. Détection de vulnérabilités : La toolbox recherchera les vulnérabilités 
connues dans les ports et les services identifiés précédemment. Elle 
pourra également identifier les vulnérabilités qui n'ont pas été corrigées 
par les mises à jour de sécurité.
3. Analyse de la sécurité des mots de passe : La toolbox sera capable 
d'analyser la sécurité des mots de passe utilisés pour accéder aux 
services du système cible. Elle pourra identifier les mots de passe faibles, 
réutilisés et potentiellement compromis.
4. Tests d'authentification : La toolbox pourra réaliser des tests 
d'authentification pour vérifier si les identifiants et mots de passe fournis 
sont valides.
5. Exploitation de vulnérabilités : La toolbox sera capable d'exploiter les 
vulnérabilités identifiées pour obtenir un accès non autorisé au système 
cible. Cette fonction sera utilisée pour vérifier l'efficacité des mesures de 
sécurité en place et pour identifier les vulnérabilités qui peuvent être 
exploitées pour un accès non autorisé.
6. Post-exploitation : La toolbox pourra effectuer une analyse approfondie 
du système cible pour identifier les données sensibles et les mesures de 
sécurité en place.
7. Reporting : La toolbox produira des rapports détaillés sur les résultats 
des tests d'intrusion et les vulnérabilités identifiées, ainsi que des 
visualisations graphiques pour aider les utilisateurs à comprendre les 
résultats.

------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------
---
-I-
---
Résumer des Fonctions attendue:

Découverte de ports et de services :
Outil : Nmap
Résumé : Nmap > scanner de réseau > permet d'identifier 
les ports ouverts et les services en cours d'exécution
Installation depuis Linux : apt-get install nmap -y (https://xael.org/pages/python-nmap.html#:~:text=python%2Dnmap%20%3A%20nmap%20from%20python,-%C3%80%20propos&text=Elle%20permet%20de%20manipuler%20facilement,%C3%AAtre%20utilis%C3%A9e%20de%20mani%C3%A8re%20asynchrone.)

Détection de vulnérabilités :
Outil : OpenVAS (Open Vulnerability Assessment System)
Résumé : OpenVAS > scanner de vulnérabilités > recherche 
les failles de sécurité connues (dans les ports et les services identifiés précédemment) 
Permettant donc de détecter les vulnérabilités potentielles 
Installation depuis Linux apt-get install openvas (https://hackingeek.com/comment-installer-openvas-sur-kali-linux/)
utilisation : ce renseignier sur les commandes en python (https://subscription.packtpub.com/book/cloud-and-networking/9781839217166/13/ch13lvl1sec92/accessing-openvas-with-python)

Analyse de la sécurité des mots de passe :
Outil : Hydra
Résumé : Hydra > test d'authentification
La sécurité des mots de passe > attaque force brute ou dictinnaire
Installtion depuis linux apt-get install hydra
utilisation : hydra -l <utilisateur> -P <liste_de_mots_de_passe> <cible> <service>
Ajouter une world liste nomé = password_list

Recherche approfondie sur [Metasploit Framework]

Tests d'authentification :
Outil :
Résumé : 

Exploitation de vulnérabilités :
Outil : 
Résumé : 

Post-exploitation :
Outil : 
Résumé : 

Reporting :
Outil : 
Résumé : 

----
-II-
----
Comment utiliser les outils déjà existant sur GitHub ?

Source Chatgpt:
/*
Voici un exemple simple en Python pour cloner un référentiel GitHub :

python
Copy code
import subprocess

def clone_repository(repo_url, destination_path):
    try:
        subprocess.run(["git", "clone", repo_url, destination_path])
        print("Repository cloned successfully.")
    except Exception as e:
        print(f"Error cloning repository: {e}")

# Exemple d'utilisation
clone_repository("https://github.com/author/repository.git", "/path/to/destination")
*/

-----------------------------------------
-----------------XXXX--------------------
-----------------------------------------



-----------------------------------------
-----------------NMAP--------------------
-----------------------------------------
Code Nmap pour afficher les services actif et les servies existant

# Fonction pour exécuter la commande Nmap pour lister les services en cours d'exécution ou tous les services existants
def execute_nmap_service_discovery(target, service_type, output_file):
    if service_type == "running":
        command = ["nmap", "-sV", target]
    elif service_type == "all":
        command = ["nmap", "-sV", "--version-all", target]
    else:
        print("Choix invalide pour le type de service.")
        return

    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)
    print("La découverte des services a été effectuée avec succès. Les résultats ont été enregistrés dans", output_file)

# Ajout d'une nouvelle option dans le menu principal pour la découverte des services
print("Veuillez choisir l'outil à exécuter :")
print("1. Nmap - Scan de ports")
print("2. Nmap - Découverte des services en cours d'exécution")
print("3. Nmap - Découverte de tous les services existants")
choix = input("Votre choix (1, 2 ou 3) : ")

# Vérification du choix de l'utilisateur et exécution de l'outil correspondant
if choix == "1":
    # Code pour le scan de ports existant
elif choix == "2":
    # Demander à l'utilisateur les paramètres nécessaires pour la découverte des services
    target = input("Adresse IP de la cible : ")
    output_file = input("Nom du fichier pour les résultats de la découverte des services : ")

    # Exécuter la commande Nmap pour la découverte des services en cours d'exécution
    execute_nmap_service_discovery(target, "running", output_file)

elif choix == "3":
    # Demander à l'utilisateur les paramètres nécessaires pour la découverte des services
    target = input("Adresse IP de la cible : ")
    output_file = input("Nom du fichier pour les résultats de la découverte des services : ")

    # Exécuter la commande Nmap pour la découverte de tous les services existants
    execute_nmap_service_discovery(target, "all", output_file)

else:
    print("Choix invalide. Veuillez saisir 1, 2 ou 3.")



----------------------------------------------------------------
-----------------NMAP_Info_Vulnéra_Port_Open--------------------
----------------------------------------------------------------

# Fonction pour exécuter les scripts de détection de vulnérabilités avec Nmap NSE
def execute_nmap_vulnerability_scan(target, port, output_file):
    command = ["nmap", "--script", "vulners", "-p", port, target]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)
    print("La détection de vulnérabilités a été effectuée avec succès pour le port", port)

# Analyser les résultats du scan de ports pour extraire les ports ouverts
def extract_open_ports(result_file):
    open_ports = []
    with open(result_file, "r") as file:
        for line in file:
            if "/open" in line:
                port = line.split("/")[0]
                open_ports.append(port)
    return open_ports

# Appeler la fonction principale
if __name__ == "__main__":
    main()
    # Après avoir analysé les résultats et extrait les ports ouverts
    open_ports = extract_open_ports("ResultatPortOuvert")

    # Pour chaque port ouvert, exécuter la détection de vulnérabilités
    for port in open_ports:
        vulnerability_output_file = "Vulnerabilites_Port_" + port + ".txt"
        execute_nmap_vulnerability_scan(target, port, vulnerability_output_file)

-----------------------------------------------------------------------------
-----------------NMAP_Info_Vulnéra_Service_Open/existant---------------------
-----------------------------------------------------------------------------

# Fonction pour exécuter les scripts de détection de vulnérabilités avec Nmap NSE
def execute_nmap_service_vulnerability_scan(target, output_file):
    command = ["nmap", "--script", "vulners", "-sV", "-oX", output_file, target]
    subprocess.run(command)
    print("La détection de vulnérabilités a été effectuée avec succès pour les services existants ou en cours d'exécution.")

# Appeler la fonction principale
if __name__ == "__main__":
    main()
    # Exécuter la détection de vulnérabilités pour les services existants ou en cours d'exécution
    execute_nmap_service_vulnerability_scan(target, "ResultatServiceActifetExistant.xml")

