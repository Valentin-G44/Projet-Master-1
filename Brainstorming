Prochaine étape : 

Re définition du plan globale :
1 - Choix des outils (vérifier qu'il soit disponible sur GitHub + autorisation de les utilisers)
2 - Elaboration du Script qui vas télécharger et exécuter les outils de git hub
"3 - API GitHub en cas de référentiel privés"
4 - Gestion de dépendances (Prérequi pour fonctionner, bibliothèque)(modification du script)
4.1 - Gestion d'autorisation (execution en root)

Autre point à classer :
-Gestion des paramètres (voir les spécificités pour chaque outils)
-Gestion des erreurs/sécurités (ex : aucun saisie) (sécurité lors du téléchargement des outils)
-Mise en place d'une documentation : pour le fonctionnemnt, l'élaboration

Finir de lister les outils à utiliser
Voir pour les implémenter à du code 
Re installer DVWA sur docker en conteneur
Configurer DVWA pour pouvoir l'utiliser comme domain de test

Test du 26/03/24
Install avec un fishier .sh
#!/bin/bash
/*
# Installation de Nmap avec sudo
echo "Installation de Nmap..."
sudo apt update
sudo apt install -y nmap

# Installation de Hydra avec sudo
echo "Installation de Hydra..."
sudo apt install -y hydra
*/

Test des commandes à la mains : 
nmap -p <plage_de_ports> <adresse_IP_cible>
hydra -l <nom_utilisateur> -P <chemin_vers_liste_de_mots_de_passe> <adresse_IP_cible> <service>

Ajout du fichier de liste de mots de passe






2 VM

Kali = val mdp =TXXXert
DVWA = DVWA mdp = admin
  root > dvwa


Idée de fonctionnalité
/*
Scanne de vulnérabilité (Port ouvert)
Référentiel des vulnérabilités (liste des CVE )
Surveillance du trafic (Wiershark)
Application web
Envoi de phishing (SET)
test d'authentification (Force brute, Medusa, Hydra)
*/

Etape
Recherche sur les fonctionnalités pour la tool box (nmap, brut force...)
Choix des fonctionalité de la tool box (menu ect...)
Choix de 3 à 6 fonctionnalité pour la tool box
Recherche approfondie sur ces technologies (Comment les implémenter dans du code, module/fonction existante)
Codé sur Python
  -Coder l'inferface de notre prgm
  -Implémenter les fonctionnalités (nmap, brut force..)
      -Récupérer les données acquises avec nos tests
      -Créer des rapprots qui contiennent nos données

Pouvoir appeler notre prgm à partir d'un terminal
Pouvoir appeler notre prgm à partir d'un terminal linux




------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------

La toolbox automatisée pour les tests d'intrusion développée dans ce projet 
offrira plusieurs fonctions principales pour permettre une réalisation complète 
et efficace des tests d'intrusion.
1. Découverte de ports et de services : La toolbox explorera le système
cible pour identifier les ports et les services en cours d'exécution. Cela 
permettra à l'utilisateur de connaître l'architecture du système cible et 
les services disponibles.
2. Détection de vulnérabilités : La toolbox recherchera les vulnérabilités 
connues dans les ports et les services identifiés précédemment. Elle 
pourra également identifier les vulnérabilités qui n'ont pas été corrigées 
par les mises à jour de sécurité.
3. Analyse de la sécurité des mots de passe : La toolbox sera capable 
d'analyser la sécurité des mots de passe utilisés pour accéder aux 
services du système cible. Elle pourra identifier les mots de passe faibles, 
réutilisés et potentiellement compromis.
4. Tests d'authentification : La toolbox pourra réaliser des tests 
d'authentification pour vérifier si les identifiants et mots de passe fournis 
sont valides.
5. Exploitation de vulnérabilités : La toolbox sera capable d'exploiter les 
vulnérabilités identifiées pour obtenir un accès non autorisé au système 
cible. Cette fonction sera utilisée pour vérifier l'efficacité des mesures de 
sécurité en place et pour identifier les vulnérabilités qui peuvent être 
exploitées pour un accès non autorisé.
6. Post-exploitation : La toolbox pourra effectuer une analyse approfondie 
du système cible pour identifier les données sensibles et les mesures de 
sécurité en place.
7. Reporting : La toolbox produira des rapports détaillés sur les résultats 
des tests d'intrusion et les vulnérabilités identifiées, ainsi que des 
visualisations graphiques pour aider les utilisateurs à comprendre les 
résultats.

------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------
---
-I-
---
Résumer des Fonctions attendue:

Découverte de ports et de services :
Outil : Nmap
Résumé : Nmap > scanner de réseau > permet d'identifier 
les ports ouverts et les services en cours d'exécution
Installation depuis Linux : apt-get install nmap -y (https://xael.org/pages/python-nmap.html#:~:text=python%2Dnmap%20%3A%20nmap%20from%20python,-%C3%80%20propos&text=Elle%20permet%20de%20manipuler%20facilement,%C3%AAtre%20utilis%C3%A9e%20de%20mani%C3%A8re%20asynchrone.)

Détection de vulnérabilités :
Outil : OpenVAS (Open Vulnerability Assessment System)
Résumé : OpenVAS > scanner de vulnérabilités > recherche 
les failles de sécurité connues (dans les ports et les services identifiés précédemment) 
Permettant donc de détecter les vulnérabilités potentielles 
Installation depuis Linux apt-get install openvas (https://hackingeek.com/comment-installer-openvas-sur-kali-linux/)
utilisation : ce renseignier sur les commandes en python (https://subscription.packtpub.com/book/cloud-and-networking/9781839217166/13/ch13lvl1sec92/accessing-openvas-with-python)

Analyse de la sécurité des mots de passe :
Outil : Hydra
Résumé : Hydra > test d'authentification
La sécurité des mots de passe > attaque force brute ou dictinnaire
Installtion depuis linux apt-get install hydra
utilisation : hydra -l <utilisateur> -P <liste_de_mots_de_passe> <cible> <service>
Ajouter une world liste nomé = password_list

Recherche approfondie sur [Metasploit Framework]

Tests d'authentification :
Outil :
Résumé : 

Exploitation de vulnérabilités :
Outil : 
Résumé : 

Post-exploitation :
Outil : 
Résumé : 

Reporting :
Outil : 
Résumé : 

----
-II-
----
Comment utiliser les outils déjà existant sur GitHub ?

Source Chatgpt:
/*
Voici un exemple simple en Python pour cloner un référentiel GitHub :

python
Copy code
import subprocess

def clone_repository(repo_url, destination_path):
    try:
        subprocess.run(["git", "clone", repo_url, destination_path])
        print("Repository cloned successfully.")
    except Exception as e:
        print(f"Error cloning repository: {e}")

# Exemple d'utilisation
clone_repository("https://github.com/author/repository.git", "/path/to/destination")
*/

-----------------------------------------
-----------------NMAP--------------------
-----------------------------------------

import subprocess

# Fonction pour exécuter la commande Nmap
def execute_nmap_command(target, options):
    command = ["nmap", target] + options.split()
    subprocess.run(command)

# Fonction principale pour recueillir les paramètres et exécuter Nmap
def main():
    # Demander à l'utilisateur les paramètres nécessaires
    target = input("Adresse IP de la cible : ")
    options = input("Options Nmap (par exemple, -sS pour un scan SYN) : ")

    # Exécuter la commande Nmap avec les paramètres fournis
    execute_nmap_command(target, options)

# Appeler la fonction principale
if __name__ == "__main__":
    main()


-----------------------------------------
-----------------CODE HYDRA--------------
-----------------------------------------
import subprocess

# Fonction pour exécuter la commande Hydra
def execute_hydra_command(username, password_list, target, service):
    command = ["hydra", "-l", username, "-P", password_list, "-f", target, service]
    subprocess.run(command)

# Fonction principale pour recueillir les paramètres et exécuter Hydra
def main():
    # Demander à l'utilisateur les paramètres nécessaires
    username = input("Nom d'utilisateur cible : ")
    password_list = input("Chemin vers la liste de mots de passe : ")
    target = input("Adresse IP de la cible : ")
    service = input("Service cible (par exemple, SSH, HTTP, etc.) : ")

    # Exécuter la commande Hydra avec les paramètres fournis
    execute_hydra_command(username, password_list, target, service)

# Appeler la fonction principale
if __name__ == "__main__":
    main()
-----------------------------------------
-----------------------------------------
-----------------------------------------

Commande Nmap et Hydra qui enregistre les résulta dans un fichier:

Globale : 

import subprocess

# Fonction pour exécuter la commande Hydra et enregistrer les résultats dans un fichier
def execute_hydra_command(username, password_list, target, service, output_file):
    command = ["hydra", "-l", username, "-P", password_list, "-f", target, service]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)

# Fonction pour exécuter la commande Nmap pour un scan de ports et enregistrer les résultats dans un fichier
def execute_nmap_port_scan(target, port_range, output_file):
    command = ["nmap", "-p", port_range, target]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)

# Fonction pour générer un rapport à partir des fichiers de résultats
def generate_report(hydra_output_file, nmap_output_file, report_file):
    with open(report_file, "w") as report:
        report.write("=== Résultats de Nmap ===\n\n")
        with open(nmap_output_file, "r") as nmap_results:
            report.write(nmap_results.read())

        report.write("\n\n=== Résultats de Hydra ===\n\n")
        with open(hydra_output_file, "r") as hydra_results:
            report.write(hydra_results.read())

# Fonction principale pour recueillir les paramètres et exécuter les commandes
def main():
    # Demander à l'utilisateur les paramètres nécessaires pour Hydra
    username = input("Nom d'utilisateur cible : ")
    password_list = input("Chemin vers la liste de mots de passe : ")
    target = input("Adresse IP de la cible : ")
    service = input("Service cible (par exemple, ssh, http, etc.) : ")
    hydra_output_file = input("Nom du fichier pour les résultats Hydra : ")

    # Exécuter la commande Hydra avec les paramètres fournis
    execute_hydra_command(username, password_list, target, service, hydra_output_file)

    # Demander à l'utilisateur les paramètres nécessaires pour Nmap
    target = input("Adresse IP de la cible : ")
    port_range = input("Plage de ports à scanner (par exemple, 1-1000) : ")
    nmap_output_file = input("Nom du fichier pour les résultats Nmap : ")

    # Exécuter la commande Nmap pour un scan de ports avec les paramètres fournis
    execute_nmap_port_scan(target, port_range, nmap_output_file)

#A retirer peut être
    print("Le scan de ports a été effectué avec succès. Les résultats ont été enregistrés dans", nmap_output_file)

    # Demander à l'utilisateur le nom du fichier pour le rapport
    report_file = input("\nNom du fichier pour le rapport final : ")

    # Générer le rapport à partir des fichiers de résultats
    generate_report(hydra_output_file, nmap_output_file, report_file)
    print("Le rapport a été généré avec succès.")

# Appeler la fonction principale
if __name__ == "__main__":
    main()
