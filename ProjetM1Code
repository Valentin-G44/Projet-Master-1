import subprocess
import os

#######################################################################################################################################################
#NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP.NMAP#
#######################################################################################################################################################
#1/1/1/1/1/1/1/1/1/1 - Nmap scan de port
# Fonction pour exécuter la commande Nmap pour un scan de ports et enregistrer les résultats dans un fichier
def execute_nmap_port_scan(target, port_range, output_file):
    command = ["nmap", "-p", port_range, target]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)
    print("Le scan de ports a été effectué avec succès. Les résultats ont été enregistrés dans", output_file)
#2/2/2/2/2/2/2/2/2/2 - Nmap scan de service
# Fonction pour exécuter la commande Nmap pour lister les services en cours d'exécution ou tous les services existants
def execute_nmap_service_discovery(target, output_file):
    command = ["nmap", "-sV", target]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)
    print("La découverte des services en cours d'exécution a été effectuée avec succès. Les résultats ont été enregistrés dans", output_file)
#3/3/3/3/3/3/3/3/3/3 - Curl Analyse du service sur un port spécifique
def execute_curl(target, port, output_file):
    command = ["curl", "-p", port, target]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)
    print("La commande Curl a été exécutée avec succès. Les résultats ont été enregistrés dans", output_file)
#4/4/4/4/4/4/4/4/4/4 - Dirb Recherche de répertoire/fichier cacher
# Fonction pour exécuter la commande Dirb pour la recherche de répertoires et de fichiers cachés
def execute_dirb(target, port, output_file):
    command = ["dirb", "http://{}:{}".format(target, port)]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)
    print("La commande Dirb a été exécutée avec succès. Les résultats ont été enregistrés dans", output_file)
#5/5/5/5/5/5/5/5/5/5 - Nikto Scan de vulnérabilité web
# Fonction pour exécuter la commande Nikto pour scanner les vulnérabilités sur un serveur web
def execute_nikto(target, output_file):
    command = ["nikto", "-h", target]
    with open(output_file, "w") as file:
        process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=file, stderr=subprocess.PIPE, text=True)
        process.communicate(input="n\n")  # Envoie 'n' pour répondre à la question d'entrée de Nikto
    print("La commande Nikto a été exécutée avec succès. Les résultats ont été enregistrés dans", output_file)

#######################################################################################################################################################
#Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra.Hydra#
#######################################################################################################################################################
#1/1/1/1/1/1/1/1/1
# Fonction pour exécuter la commande Hydra et enregistrer les résultats dans un fichier
def execute_hydra_command(username, password_list, target, service, output_file):
    command = ["hydra", "-l", username, "-P", password_list, "-f", target, service]
    with open(output_file, "w") as file:
        subprocess.run(command, stdout=file)

#######################################################################################################################################################
#Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rapport.Rappo#
#######################################################################################################################################################
##NON NON NON FOnctionnel pour le moments
# Fonction pour générer un rapport à partir des fichiers de résultats
def generate_report(hydra_output_file, nmap_output_file, report_file):
    with open(report_file, "w") as report:
        report.write("=== Résultats de Nmap ===\n\n")
        if nmap_output_file is not None:
            with open(nmap_output_file, "r") as nmap_results:
                report.write(nmap_results.read())

        report.write("\n\n=== Résultats de Hydra ===\n\n")
        with open(hydra_output_file, "r") as hydra_results:
            report.write(hydra_results.read())

        print("Le rapport a été généré avec succès.")
#FIN NON FIN NON FIN NON FONCTUONNEL POUR LE Moments

# Fonction principale pour recueillir les paramètres et exécuter les commandes
def main():
    while True:
        # Affichage du menu pour choisir l'outil à exécuter
        print("\nVeuillez choisir l'outil à exécuter :")
        print("1. Découverte de port et de services et de leurs vulnérabilités - NMAP ")
        print("2. Analyse de la sécurité des mots de passe, Test d'authentification - Hydra")
        print("3. Exploitation de vulnérabilités - Metasploit")
        print("4. Recherche vulnérabilité - XXX")
        print("5. Générez un rapport des tests effectués")
        print("6. Quitter")
        choix_outil = input("Votre choix (1 - 5) : ")


        if choix_outil == "1":
            # Code pour Nmap
            print("\nVeuillez choisir l'option Nmap à exécuter :")
            print("1. Le scan de ports - Nmap")
            print("2. La découverte des services en cours d'exécution - Nmap")
            print("3. Analyse du service sur un port spécifique - Curl")
            print("4. Recherche de répertoires/fichiers cachés sur un serveur web - dirb)")
            print("5. Scan de vulnérabilité sur un serveur web - Nikto")
            print("6. Retour au choix de l'outil")
            choix_nmap = input("Votre choix (1, 2, 3 ou 4) : ")
            #Nmap - Scan port
            if choix_nmap == "1":
                target = input("Adresse IP de la cible : ")
                port_range = input("Plage de ports à scanner (par exemple, 1-1000) : ")
                nmap_output_file = input("Nom du fichier pour les résultats Nmap : ")
                execute_nmap_port_scan(target, port_range, nmap_output_file)
            #Nmap - Scan service
            elif choix_nmap == "2":
                target = input("Adresse IP de la cible : ")
                output_file = input("Nom du fichier pour les résultats de la découverte des services : ")
                execute_nmap_service_discovery(target, "running", output_file)
            #Curl -
            elif choix_nmap == "3":
                print("\nExécution de l'outil Curl :")
                target = input("Adresse IP de la cible : ")
                port = input("Numéro de port : ")
                output_file = input("Nom du fichier pour les résultats Curl : ")
                execute_curl(target, port, output_file)
            #Dirb
            elif choix_nmap == "4":
                print("\nExécution de l'outil Dirb :")
                target = input("Adresse IP de la cible : ")
                port = input("Numéro de port : ")
                output_file = input("Nom du fichier pour les résultats Dirb : ")
                execute_dirb(target, port, output_file)              
            #Nikto
            elif choix_nmap == "5":
                print("\nExécution de l'outil Nikto :")
                target = input("Adresse IP de la cible : ")
                output_file = input("Nom du fichier pour les résultats Nikto : ")
                execute_nikto(target, output_file)
                
            elif choix_nmap == "6":
                continue  # Retour au choix de l'outil

            else:
                print("Choix invalide. Veuillez saisir 1, 2, 3 ou 4.")
        
        elif choix_outil == "2":
            # Code pour Hydra
            print("\nVeuillez choisir l'option Hydra à exécuter :")
            print("1. Analyse de la sécurité des mots de passe")
            print("2. Tester une liste de mdp pour 1 identifient connue")
            print("3. Tester une liste d identifient pour un mdp connue")
            print("4. Test d authentification avec les identifiants récupérer avant")
            print("5. Retour au choix de l'outil")
            choix_hydra = input("Votre choix (1, 2, 3, 4 ou 5) : ")
            if choix_hydra == "1":
                # Code pour l'option 1 de Hydra
                # Demander à l'utilisateur les paramètres nécessaires pour Hydra
                username = input("Nom d'utilisateur cible : ")
                password_list = "/home/valentingaget/Downloads/password_list.txt"
                target = input("Adresse IP de la cible : ")
                service = input("Service cible (par exemple, ssh, http, etc.) : ")
                hydra_output_file = input("Nom du fichier pour les résultats Hydra : ")

                # Exécuter la commande Hydra avec les paramètres fournis
                execute_hydra_command(username, password_list, target, service, hydra_output_file)



            elif choix_hydra == "2":
                # Code pour l'option 2 de Hydra
                pass  # Placeholder pour la fonctionnalité future

            elif choix_hydra == "3":
                # Code pour l'option 3 de Hydra
                pass  # Placeholder pour la fonctionnalité future

            elif choix_hydra == "4":
                # Code pour l'option 4 de Hydra
                pass  # Placeholder pour la fonctionnalité future

            elif choix_hydra == "5":
                continue  # Retour au choix de l'outil

            else:
                print("Choix invalide. Veuillez saisir 1, 2, 3, 4 ou 5.")

        elif choix_outil == "3":
            # Code pour Metasploit
            print("\nVeuillez choisir l'option Metasploit à exécuter :")
            print("1. Exploitation de vulnérabilités")
            print("2. Post-exploitation")
            print("3. Reporting")
            print("4. Retour au choix de l'outil")
            choix_metasploit = input("Votre choix (1, 2, 3 ou 4) : ")
            if choix_metasploit == "1":
                # Code pour l'option 1 de Metasploit
                pass  # Placeholder pour la fonctionnalité future

            elif choix_metasploit == "2":
                # Code pour l'option 2 de Metasploit
                pass  # Placeholder pour la fonctionnalité future

            elif choix_metasploit == "3":
                # Code pour l'option 3 de Metasploit
                pass  # Placeholder pour la fonctionnalité future

            elif choix_metasploit == "4":
                continue  # Retour au choix de l'outil

            else:
                print("Choix invalide. Veuillez saisir 1, 2, 3 ou 4.")

        elif choix_outil == "4":
            # Code pour XXXX
            print("\nVeuillez choisir l'option XXXXX à exécuter :")
            print("1. CVE")
            print("2. Recherche vulnérabilité")
            print("3. Création de backdoor")
            print("4. Retour au choix de l'outil")
            choix_xxxx = input("Votre choix (1, 2, 3 ou 4) : ")
            if choix_xxxx == "1":
                # Code pour l'option 1 de XXXX
                pass  # Placeholder pour la fonctionnalité future

            elif choix_xxxx == "2":
                # Code pour l'option 2 de XXXX
                pass  # Placeholder pour la fonctionnalité future

            elif choix_xxxx == "3":
                # Code pour l'option 3 de XXXX
                pass  # Placeholder pour la fonctionnalité future

            elif choix_xxxx == "4":
                continue  # Retour au choix de l'outil

            else:
                print("Choix invalide. Veuillez saisir 1, 2, 3 ou 4.")
        
        elif choix_outil == "5":
                
                # Demander à l'utilisateur le nom du fichier pour le rapport
                report_file = input("\nNom du fichier pour le rapport final : ")

                # Générer le rapport à partir des fichiers de résultats
                generate_report(hydra_output_file, nmap_output_file, report_file)
             
        elif choix_outil == "6":
            break  # Fermeture du programme

        else:
            print("Choix invalide. Veuillez saisir un nombre entre 1 et 5.")

# Appeler la fonction principale
if __name__ == "__main__":
    main()
